module reals where
import experiments/circle

def R-zero := elem Z-zero

def cis := R-rec S¹ (λ (_ : Z), base) (λ (_ : Z), loop)

def center-pos :=
N-ind (λ (n : N), Path R R-zero (elem (pos n))) (idp R-zero)
      (λ (n : N) (p : Path R R-zero (elem (pos n))), p ⬝ glue (pos n))

def center-neg :=
N-ind (λ (n : N), Path R R-zero (elem (neg n))) (glue (neg zero))⁻¹
      (λ (n : N) (p : Path R R-zero (elem (neg n))), p ⬝ (glue (neg (succ n)))⁻¹)

def center : Π (z : Z), Path R R-zero (elem z) :=
Z-ind (λ (z : Z), Path R R-zero (elem z)) center-pos center-neg

def vect (u v : Z) : Path R (elem u) (elem v) :=
(center u)⁻¹ ⬝ center v

def R-contr-glueᵀ (z : Z) :=
Path (Path R R-zero (elem (Z-succ z)))
  (subst R (λ (y : R), Path R R-zero y) (elem z) (elem (Z-succ z)) (glue z) (center z))
  (center (Z-succ z))

def R-zero-contr :=
R-ind (λ (y : R), Path R R-zero y) center
  (Z-ind R-contr-glueᵀ
    (N-ind (λ (n : N), R-contr-glueᵀ (pos n)) (idp (glue Z-zero))
      (λ (n : N) (p : R-contr-glueᵀ (pos n)), idp (center-pos (succ (succ n)))))
    (N-ind (λ (n : N), R-contr-glueᵀ (neg n)) (idp (idp R-zero))
      (λ (n : N) (p : R-contr-glueᵀ (neg n)), idp (center-neg n))))

def R-contr : is-contr R :=
Σ-mk (contr R) (elem Z-zero) R-zero-contr

def dist : is-prop R := contr-impl-prop R R-contr

def Z-lift (f : Z → Z) : R → R :=
R-rec R (λ (z : Z), elem (f z)) (λ (z : Z), vect (f z) (f (Z-succ z)))

def Z-lift² (f : Z → Z → Z) : R → R → R :=
R-rec (R → R) (λ (z : Z), Z-lift (f z))
  (λ (z : Z), funext R (λ (_ : R), R) (Z-lift (f z)) (Z-lift (f (Z-succ z)))
    (λ (x : R), dist (Z-lift (f z) x) (Z-lift (f (Z-succ z)) x)))

def R-succ := Z-lift Z-succ
def R-neg  := Z-lift Z-neg′
def R-add  := Z-lift² Z-add

def reflect (A : U) (a b : A) : Id A a b → Path A a b :=
idJ A (λ (a b : A) (_ : Id A a b), Path A a b) a (idp a) b
