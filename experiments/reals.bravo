module reals where
import experiments/circle

def R-rec (A : U) := R-ind (λ (x : R), A)

def cis := R-rec S¹ (λ (_ : Z), base) (λ (_ : Z), loop)

def center : Π (z : Z), Path R (elem zero) (elem z) :=
Z-ind (λ (z : Z), Path R (elem zero) (elem z)) (idp (elem zero))
  (λ (z : Z) (p : Path R (elem zero) (elem z)), p ⬝ glue z)
  (λ (z : Z) (p : Path R (elem zero) (elem z)), p ⬝ (glue (pred z))⁻¹)

def vect (u v : Z) : Path R (elem u) (elem v) :=
(center u)⁻¹ ⬝ center v

def R-contr : is-contr R :=
(elem zero, R-ind (λ (y : R), Path R (elem zero) y) center
  (Z-ind (λ (z : Z),
    Path (Path R (elem zero) (elem (succ z)))
      (subst R (λ (y : R), Path R (elem zero) y)
        (elem z) (elem (succ z)) (glue z) (center z))
      (center (succ z)))
    (idp (glue zero))
    (λ (z : Z) (p : Path (Path R (elem zero) (elem (succ z)))
                         (center z ⬝ glue z) (center z ⬝ glue z)),
      idp (center z ⬝ glue z ⬝ glue (succ z)))
    (λ (z : Z) (p : Path (Path R (elem zero) (elem (succ z)))
                         (center z ⬝ glue z) (center z ⬝ glue z)),
      idp (center z))))

def dist : is-prop R := contr-impl-prop R R-contr

def Z-lift (f : Z → Z) : R → R :=
R-rec R (λ (z : Z), elem (f z)) (λ (z : Z), vect (f z) (f (succ z)))

def Z-con (A : U) (B : A → U) (f g : Π (x : A), B x)
  (p : Π (x : A), Path (B x) (f x) (g x)) (x : A) : Z → B x :=
Z-rec (B x) (f x) (λ (_ : B x), g x) (λ (_ : B x), f x)

def R-con (A : U) (B : A → U) (f g : Π (x : A), B x)
  (p : Π (x : A), Path (B x) (f x) (g x)) (x : A) : R → B x :=
R-rec (B x) (Z-con A B f g p x) (Z-ind (λ (z : Z), Path (B x) (Z-con A B f g p x z) (g x))
  (p x) (λ (z : Z) (_ : Path (B x) (Z-con A B f g p x z) (g x)), idp (g x))
  (λ (z : Z) (_ : Path (B x) (Z-con A B f g p x z) (g x)), p x))

def funext (A : U) (B : A → U) (f g : Π (x : A), B x)
  (p : Π (x : A), Path (B x) (f x) (g x)) :=
ap R (Π (x : A), B x) (λ (z : R) (x : A), R-con A B f g p x z)
     (elem zero) (elem (succ zero)) (glue zero)

def Z-lift² (f : Z → Z → Z) : R → R → R :=
R-rec (R → R) (λ (z : Z), Z-lift (f z))
  (λ (z : Z), funext R (λ (_ : R), R) (Z-lift (f z)) (Z-lift (f (succ z)))
    (λ (x : R), dist (Z-lift (f z) x) (Z-lift (f (succ z)) x)))

def R-add := Z-lift² Z-add
