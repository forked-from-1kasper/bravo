module test where

def id (A : U) : U := A
def ∘ (A B C : U) (f : B → C) (g : A → B) : A → C := λ (x : A), f (g x)

def refl′ (A : U) (a : A) : Path A a a := idp a
def symm (A : U) (a b : A) (p : Path A a b) : Path A b a := p⁻¹
def trans (A : U) (a b c : A) (p : Path A a b) (q : Path A b c) : Path A a c := p ⬝ q
def symm-symm (A : U) (a b : A) (p : Path A a b) :
  Path (Path A a b) (symm A b a (symm A a b p)) p :=
idp p

def ∂-irrel (A : U) (a b x : A) (p q : ∂ a b x) : Path (∂ a b x) p q := idp p

def subst (A : U) (P : A → U) (a b : A) (p : Path A a b) (x : P a) : P b :=
coe (cong (λ (x : A) (H : ∂ a b x), P x) p) x

def ap (A B : U) (f : A → B) (a b : A) (p : Path A a b) :=
cong (λ (x : A) (H : ∂ a b x), f x) p

-- “apd A (λ (x : A), B)” evaluates to “cong”
def apd (A : U) (a b : A) (B : Π (x : A), ∂ a b x → U)
  (f : Π (x : A) (H : ∂ a b x), B x H) (p : Path A a b) :=
cong (λ (x : A) (H : ∂ a b x),
  coe (cong (λ (y : A) (H′ : ∂ x b y), B y (∂-comp H H′))
    ((meet p⁻¹ x (∂-symm H)).2)⁻¹) (f x H)) p

def J (A : U) (P : Π (a b : A), Path A a b → U)
  (a : A) (d : P a a (idp a)) (b : A) (p : Path A a b) : P a b p :=
coe (cong (λ (x : A) (H : ∂ a b x), P a (meet p x H).1 (meet p x H).2) p) d

-- β-rule for J holds definitionally
def J-β (A : U) (P : Π (a b : A), Path A a b → U) (a : A)
  (d : P a a (idp a)) : Path (P a a (idp a)) d (J A P a d a (idp a)) :=
idp d

def coe-cong-Π (Δ : U) (α β : Δ) (A : Π (x : Δ), ∂ α β x → U)
  (B : Π (x : Δ) (H : ∂ α β x), A x H → U) (p : Path Δ α β)
  (φ : Π (a : A α (left α β)),  B α (left α β)  a) :
       Π (b : A β (right α β)), B β (right α β) b :=
λ (x : A β (right α β)),
  coe (cong (λ (y : Δ) (H : ∂ α β y),
    B y H (coe (cong (λ (z : Δ) (H′ : ∂ β y z), A z (∂-comp H (∂-symm H′)))
      (meet p⁻¹ y (∂-symm H)).2) x)) p)
  (φ (coe (cong (λ (x : Δ) (H : ∂ β α x), A x (∂-symm H)) p⁻¹) x))

def coe-cong-Σ (Δ : U) (α β : Δ) (A : Π (x : Δ), ∂ α β x → U)
  (B : Π (x : Δ) (H : ∂ α β x), A x H → U) (p : Path Δ α β)
  (z : Σ (a : A α (left α β)),  B α (left α β)  a) :
       Σ (b : A β (right α β)), B β (right α β) b :=
(coe (cong A p) z.1,
 coe (cong (λ (y : Δ) (H : ∂ α β y),
   B y H (coe (cong (λ (y′ : Δ) (H′ : ∂ α y y′),
     A y′ (∂-symm (∂-comp (∂-symm H) (∂-symm H′)))) (meet p y H).2) z.1)) p) z.2)

def coe-cong-Path (Δ : U) (α β : Δ) (A : Π (x : Δ), ∂ α β x → U)
  (f g : Π (x : Δ) (H : ∂ α β x), A x H) (p : Path Δ α β)
  (q : Path (A α (left α β))  (f α (left α β))  (g α (left α β))) :
       Path (A β (right α β)) (f β (right α β)) (g β (right α β)) :=
  (apd Δ α β A f p)⁻¹
⬝ (ap (A α (left α β)) (A β (right α β))
    (λ (x : A α (left α β)), coe (cong A p) x)
    (f α (left α β)) (g α (left α β)) q)
⬝ (apd Δ α β A g p)

def coe-cong-Π′ (Δ : U) (α β : Δ) (A : Π (x : Δ), ∂ α β x → U)
  (B : Π (x : Δ) (H : ∂ α β x), A x H → U) (p : Path Δ α β)
  (φ : Π (a : A α (left α β)),  B α (left α β)  a) :
       Π (b : A β (right α β)), B β (right α β) b :=
coe (cong (λ (x : Δ) (H : ∂ α β x), Π (a : A x H), B x H a) p) φ

def coe-cong-Π-is-correct (Δ : U) (α β : Δ) (A : Π (x : Δ), ∂ α β x → U)
  (B : Π (x : Δ) (H : ∂ α β x), A x H → U) (p : Path Δ α β)
  (φ : Π (a : A α (left α β)),  B α (left α β)  a) :
  Path (Π (b : A β (right α β)), B β (right α β) b)
       (coe-cong-Π Δ α β A B p φ) (coe-cong-Π′ Δ α β A B p φ) :=
idp (coe-cong-Π Δ α β A B p φ)

def coe-cong-Σ′ (Δ : U) (α β : Δ) (A : Π (x : Δ), ∂ α β x → U)
  (B : Π (x : Δ) (H : ∂ α β x), A x H → U) (p : Path Δ α β)
  (z : Σ (a : A α (left α β)),  B α (left α β)  a) :
       Σ (b : A β (right α β)), B β (right α β) b :=
coe (cong (λ (x : Δ) (H : ∂ α β x), Σ (a : A x H), B x H a) p) z

def coe-cong-Σ-is-correct (Δ : U) (α β : Δ) (A : Π (x : Δ), ∂ α β x → U)
  (B : Π (x : Δ) (H : ∂ α β x), A x H → U) (p : Path Δ α β)
  (z : Σ (a : A α (left α β)),  B α (left α β)  a) :
  Path (Σ (b : A β (right α β)), B β (right α β) b)
       (coe-cong-Σ Δ α β A B p z) (coe-cong-Σ′ Δ α β A B p z) :=
idp (coe-cong-Σ Δ α β A B p z)

def coe-cong-Path′ (Δ : U) (α β : Δ) (A : Π (x : Δ), ∂ α β x → U)
  (f g : Π (x : Δ) (H : ∂ α β x), A x H) (p : Path Δ α β)
  (q : Path (A α (left α β))  (f α (left α β))  (g α (left α β))) :
       Path (A β (right α β)) (f β (right α β)) (g β (right α β)) :=
coe (cong (λ (x : Δ) (H : ∂ α β x), Path (A x H) (f x H) (g x H)) p) q

def coe-cong-Path-is-correct (Δ : U) (α β : Δ) (A : Π (x : Δ), ∂ α β x → U)
  (f g : Π (x : Δ) (H : ∂ α β x), A x H) (p : Path Δ α β)
  (q : Path (A α (left α β))  (f α (left α β))  (g α (left α β))) :
  Path (Path (A β (right α β)) (f β (right α β)) (g β (right α β)))
       (coe-cong-Path Δ α β A f g p q) (coe-cong-Path′ Δ α β A f g p q) :=
idp (coe-cong-Path Δ α β A f g p q)

def symm′ (A : U) (a b : A) (p : Path A a b) : Path A b a :=
coe (cong (λ (x : A) (H : ∂ a b x), Path A x a) p) (idp a)

def symm″ (A : U) (a b : A) (p : Path A a b) : Path A b a :=
J A (λ (a b : A) (p : Path A a b), Path A b a) a (idp a) b p

def symm‴ (A : U) (a b : A) (p : Path A a b) : Path A b a :=
coe-cong-Path A a b (λ (x : A) (H : ∂ a b x), A)
  (λ (x : A) (H : ∂ a b x), x) (λ (x : A) (H : ∂ a b x), a) p (idp a)

def trans′ (A : U) (a b c : A) (p : Path A a b) (q : Path A b c) : Path A a c :=
coe (cong (λ (x : A) (H : ∂ b c x), Path A a x) q) p

def transport-back-and-forward (A : U) (P : A → U) (a b : A)
  (p : Path A a b) (u : P b) : Path (P b) (subst A P a b p (subst A P b a p⁻¹ u)) u :=
idp u

def cong-comp (A B : U) (a b c : A) (p : Path A a b) (q : Path A b c)
  (f : Π (x : A), ∂ a c x → B) :=
(cong (λ (x : A) (H : ∂ a b x), f x (∂-right H q)) p) ⬝
(cong (λ (x : A) (H : ∂ b c x), f x (∂-left H p⁻¹)) q)

def ap-trans (A B : U) (f : A → B) (a b c : A) (p : Path A a b) (q : Path A b c) :
  Path (Path B (f a) (f c)) (ap A B f a c (p ⬝ q)) ((ap A B f a b p) ⬝ (ap A B f b c q)) :=
idp (ap A B f a c (p ⬝ q))

def subst-trans (A : U) (P : A → U) (a b c : A)
  (p : Path A a b) (q : Path A b c) (x : P a) :
  Path (P c) (subst A P a c (p ⬝ q) x) (subst A P b c q (subst A P a b p x)) :=
idp (subst A P a c (p ⬝ q) x)

def cong-composition (A B C : U) (a b : A) (p : Path A a b) (g : Π (x : A), ∂ a b x → B)
  (f : Π (x : B), ∂ (g a (left a b)) (g b (right a b)) x → C) :=
cong (λ (x : A) (H : ∂ a b x), f (g x H) (∂-cong g x H)) p

def ap-comp (A B C : U) (f : A → B) (g : B → C) (a b : A) (p : Path A a b) :
  Path (Path C (g (f a)) (g (f b))) (ap B C g (f a) (f b) (ap A B f a b p))
    (ap A C (λ (x : A), g (f x)) a b p) :=
idp (ap A C (λ (x : A), g (f x)) a b p)

def path-idfun (A : U) (a b : A) (p : Path A a b) :=
J A (λ (a b : A) (p : Path A a b), Path A a b) a (idp a) b p
