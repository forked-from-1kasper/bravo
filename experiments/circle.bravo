module circle where

import experiments/funext
import experiments/inf-group

def Ω¹S¹ := Path S¹ base base

def S¹-rec (β : U) : Π (b : β), Path β b b → S¹ → β :=
S¹-ind (λ (x : S¹), β)

def triv : S¹ → S¹ := S¹-rec S¹ base loop

def triv-eq-id : Π (x : S¹), Path S¹ (triv x) x :=
S¹-ind (λ (x : S¹), Path S¹ (triv x) x) (idp base) (idp (idp base))

def rot (x : S¹) : Path S¹ x x :=
S¹-ind (λ (y : S¹), Path S¹ y y) loop (idp loop) x

def S¹-apd (β : Π (x : S¹), S¹ → U) (b : Π (x : S¹), β x base)
  (ℓ : Π (x : S¹), Path (β x base) (coe (apd (β x) loop) (b x)) (b x)) (f : S¹ → S¹) :
   Path (β base (f base))
        (coe (apd (λ (x : S¹), β x (f x)) loop)
                  (S¹-ind (β base) (b base) (ℓ base) (f base)))
        (S¹-ind (β base) (b base) (ℓ base) (f base)) :=
?

def S¹-apd′ (β : Π (x : S¹), S¹ → U) (b : Π (x : S¹), β x base)
  (ℓ : Π (x : S¹), Path (β x base) (coe (apd (β x) loop) (b x)) (b x)) (f : S¹ → S¹) :
   Path (β base (f base))
        (coe (apd (λ (x : S¹), β x (f x)) loop)
                  (S¹-ind (β base) (b base) (ℓ base) (f base)))
        (S¹-ind (β base) (b base) (ℓ base) (f base)) :=
apd (λ (x : S¹), S¹-ind (β x) (b x) (ℓ x) (f x)) loop

def μ (x : S¹) : S¹ → S¹ := S¹-rec S¹ x (rot x)
def σ (x : S¹) := μ x x

def μ-base-left : Π (x : S¹), Path S¹ (μ base x) x :=
S¹-ind (λ (x : S¹), Path S¹ (μ base x) x) (idp base) (idp (idp base))

def μ-base-right (x : S¹) : Path S¹ (μ x base) x :=
idp x

def double-loop := ap S¹ S¹ σ base base
def triple-loop := ap S¹ S¹ (λ (x : S¹), μ x (σ x)) base base

def ι : S¹ → S¹ := S¹-rec S¹ base loop⁻¹
def ι-test := ap S¹ S¹ ι base base (loop ⬝ loop ⬝ loop)

def helix : S¹ → U :=
S¹-ind (λ (x : S¹), U) Z Z-succ-path

def encode (x : S¹) (p : Path S¹ base x) : helix x :=
subst S¹ helix base x p Z-zero

-- it computes!
def winding := encode base

def turn (l : Ω¹S¹) := l ⬝ loop
def back-turn (l : Ω¹S¹) := l ⬝ loop⁻¹

def power : Z → Ω¹S¹ :=
Z-rec Ω¹S¹ (N-rec Ω¹S¹ (idp base) (λ (_ : N), turn))
           (N-rec Ω¹S¹ loop⁻¹ (λ (_ : N), back-turn))

def decode : Π (x : S¹), helix x → Path S¹ base x :=
S¹-ind (λ (x : S¹), helix x → Path S¹ base x) power
  (funext Z (λ (_ : Z), Ω¹S¹) (λ (z : Z), power (Z-pred z) ⬝ loop) power
    (Z-ind (λ (z : Z), Path Ω¹S¹ (power (Z-pred z) ⬝ loop) (power z))
      (N-ind (λ (m : N), Path Ω¹S¹ (power (Z-pred (pos m)) ⬝ loop) (power (pos m)))
        (idp (idp base)) (λ (m : N) (p : Path Ω¹S¹ (power (Z-pred (pos m)) ⬝ loop) (power (pos m))), idp (power (pos (succ m)))))
      (λ (n : N), idp (power (neg n)))))

def decode-encode : Π (x : S¹) (p : Path S¹ base x), Path (Path S¹ base x) (decode x (encode x p)) p :=
J′ S¹ base (λ (x : S¹) (p : Path S¹ base x), Path (Path S¹ base x) (decode x (encode x p)) p) (idp (idp base))

def encode-decodeᵀ (z : Z) :=
Path Z (encode base (decode base z)) z

def encode-decode : Π (z : Z), Path Z (encode base (decode base z)) z :=
Z-ind encode-decodeᵀ
  (N-ind (λ (m : N), encode-decodeᵀ (pos m)) (idp (pos zero))
         (λ (m : N), ap Z Z Z-succ (encode base (decode base (pos m))) (pos m)))
  (N-ind (λ (m : N), encode-decodeᵀ (neg m)) (idp (neg zero))
         (λ (m : N), ap Z Z Z-pred (encode base (decode base (neg m))) (neg m)))

def fundamental-group : equiv Ω¹S¹ Z :=
mkeqv Ω¹S¹ Z (encode base) (decode base) (decode-encode base) (decode base) (encode-decode)

def π₁S¹ : ∞-group :=
mk-∞-group Ω¹S¹ (λ (x y : Ω¹S¹), x ⬝ y) (λ (x : Ω¹S¹), x⁻¹) (idp base)
 (λ (x y z : Ω¹S¹), idp (x ⬝ y ⬝ z)) (λ (x : Ω¹S¹), idp x) (λ (x : Ω¹S¹), idp (idp base))

def integer : ∞-group :=
Σ-mk is-∞-group Z (coe (apd is-∞-group (ua Ω¹S¹ Z fundamental-group)) π₁S¹.2)

def Z-add : Z → Z → Z := op∞ integer
def Z-assoc : Π (x y z : Z), Path Z (Z-add x (Z-add y z)) (Z-add (Z-add x y) z) := assoc∞ integer

-- :-(
--def Z-zero-eq-zero : Path Z (pos zero) (pos zero) :=
--Z-assoc (pos zero) (pos zero) (pos zero)
