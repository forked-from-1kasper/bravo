module integer where
import experiments/univalence

def N-rec (A : U) := N-ind (λ (x : N), A)
def Z-rec (A : U) := Z-ind (λ (x : Z), A)

def Z-zero := pos zero
def Z-one  := pos (succ zero)

def Z-succ-equiv : equiv Z Z :=
mkeqv Z Z Z-succ Z-pred (λ (x : Z), idp x) Z-pred (λ (x : Z), idp x)

def Z-succ-path : Path U Z Z := ua Z Z Z-succ-equiv

def Z-three := coe (Z-succ-path ⬝ Z-succ-path ⬝ Z-succ-path) Z-zero
def Z-minus-three := coe (Z-succ-path ⬝ Z-succ-path ⬝ Z-succ-path)⁻¹ Z-zero

def Z-neg′ : Z → Z := Z-rec Z (N-rec Z Z-zero (λ (n : N) (_ : Z), neg n)) (λ (n : N), pos (succ n))

def is-succ-pred-alg (A : U) :=
Σ (f : A → A), rinv A A f

def succ-pred-alg := Σ (A : U), is-succ-pred-alg A

def Z-succ-pred : succ-pred-alg :=
Σ-mk is-succ-pred-alg Z (Σ-mk (rinv Z Z) Z-succ (Σ-mk (sec Z Z Z-succ) Z-pred (λ (x : Z), idp x)))

def Z-succ-pred′ : succ-pred-alg :=
Σ-mk is-succ-pred-alg Z (coe (apd is-succ-pred-alg Z-succ-path) Z-succ-pred.2)

def bad-refl : Path Z (pos zero) (pos zero) :=
Z-succ-pred′.2.2.2 (pos zero)

def loops (A : U) := Σ (a : A), Path A a a
def loop-struct := Σ (A : U), loops A

def Z-loop-struct : loop-struct :=
Σ-mk loops Z (Σ-mk (λ (z : Z), Path Z z z) (pos zero) (idp (pos zero)))

def Z-loop-struct′ : loop-struct :=
Σ-mk loops Z (coe (apd loops Z-succ-path) Z-loop-struct.2)

def good-refl : Path Z (pos (succ zero)) (pos (succ zero)) :=
Z-loop-struct′.2.2
