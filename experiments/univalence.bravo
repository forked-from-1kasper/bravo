module univalence where
import experiments/equiv

def ua (A B : U) (e : equiv A B) : Path U A B :=
ua-weak A B e.1 e.2.2.1 (linv-inv A B e.1 e.2.1.1 e.2.2.1 e.2.1.2 e.2.2.2) e.2.2.2

def ideqv (A B : U) (p : Path U A B) : equiv A B :=
coe (apd (equiv A) p) (equiv-id A)

def idiso (A B : U) (p : Path U A B) : iso A B :=
coe (apd (iso A) p) (iso-id A)

def uaβ (A B : U) (e : equiv A B) (x : A) : Path B (coe (ua A B e) x) (e.1 x) :=
idp (e.1 x)

def equiv-symm′ (A B : U) (e : equiv A B) : equiv B A :=
ideqv B A (ua A B e)⁻¹

def equiv-trans′ (A B C : U) (e₁ : equiv A B) (e₂ : equiv B C) : equiv A C :=
ideqv A C (ua A B e₁ ⬝ ua B C e₂)

def ua-ideqv (A B : U) (p : Path U A B) : Path (Path U A B) (ua A B (ideqv A B p)) p :=
coe (apd (λ (w : Σ (X : U), Path U A X), Path (Path U A w.1) (ua A w.1 (ideqv A w.1 w.2)) w.2)
  (Σ-prod p (λ (X : U), Path U A X) (idp A) p (idp p))) (idp (idp A))

def ideqv-ua₁ (A B : U) (e : equiv A B) : Path (A → B) (ideqv A B (ua A B e)).1 e.1 := idp e.1
def ideqv-ua₂ (A B : U) (e : equiv A B) : Path (B → A) (ideqv A B (ua A B e)).2.2.1 e.2.2.1 := idp e.2.2.1

def ua-weak-symm (A B : U) (e : iso A B) : iso B A :=
idiso B A (ua-weak A B e.1 e.2.1 e.2.2.1 e.2.2.2)⁻¹

def ua-weak-trans (A B C : U) (e₁ : iso A B) (e₂ : iso B C) : iso A C :=
idiso A C (ua-weak A B e₁.1 e₁.2.1 e₁.2.2.1 e₁.2.2.2 ⬝
           ua-weak B C e₂.1 e₂.2.1 e₂.2.2.1 e₂.2.2.2)

def negate : 𝟐 → 𝟐 :=
ind₂ (λ (_ : 𝟐), 𝟐) 1₂ 0₂

def negate-negate :=
ind₂ (λ (x : 𝟐), Path 𝟐 (negate (negate x)) x) (idp 0₂) (idp 1₂)

def bool-neg-path : Path U 𝟐 𝟐 :=
ua-weak 𝟐 𝟐 negate negate negate-negate negate-negate

def 0₂-eq-0₂-bad-way : Path 𝟐 0₂ 0₂ :=
(ideqv 𝟐 𝟐 bool-neg-path).2.2.2 0₂
