module univalence where
import experiments/equiv

def ua′ (A B : U) (e : A ≃ B) : Path U A B := ua e
def ideqv (A B : U) (p : Path U A B) : A ≃ B :=
coe (apd (λ (X : U) (H : ∂ A B X), A ≃ X) p) (equiv-id A)

def uaβ (A B : U) (e : A ≃ B) (x : A) : Path B (coe (ua e) x) (e.1 x) :=
idp (e.1 x)

def equiv-symm′ (A B : U) (e : A ≃ B) : B ≃ A :=
ideqv B A (ua e)⁻¹

def equiv-trans′ (A B C : U) (e₁ : A ≃ B) (e₂ : B ≃ C) : A ≃ C :=
ideqv A C (ua e₁ ⬝ ua e₂)

def equiv-symm-test (A B : U) (e : A ≃ B) : Path (Path U B A) (ua (equiv-symm A B e)) (ua e)⁻¹ :=
idp (ua e)⁻¹

def equiv-trans-test (A B C : U) (e₁ : A ≃ B) (e₂ : B ≃ C) :
  Path (Path U A C) (ua (equiv-trans A B C e₁ e₂)) (ua e₁ ⬝ ua e₂) :=
idp (ua e₁ ⬝ ua e₂)

def ua-ideqv (A B : U) (p : Path U A B) : Path (Path U A B) (ua (ideqv A B p)) p :=
coe (apd (λ (X : U) (H : ∂ A B X), Path (Path U A X)
  (ua (ideqv A X (meet p X H).2)) (meet p X H).2) p) (idp (idp A))
