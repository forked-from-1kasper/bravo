module path where

def ¬ (A : V) := A → ⊥

def id (A : U) : U := A
def idfun (A : U) (a : A) : A := a

def ∘ (A B C : U) (f : B → C) (g : A → B) : A → C := λ (x : A), f (g x)

def Path′ (A : U) (a b : A) := Path A a b

def contr (A : U) (x : A) := Π (y : A), Path A x y
def is-contr (A : U) : U := Σ (x : A), contr A x
def is-prop (A : U) : U := Π (a b : A), Path A a b
def is-set (A : U) : U := Π (a b : A), is-prop (Path A a b)
def is-groupoid (A : U) : U := Π (a b : A), is-set (Path A a b)
def is-2-groupoid (A : U) : U := Π (a b : A), is-groupoid (Path A a b)

def contr-impl-prop (A : U) (z : is-contr A) : is-prop A :=
λ (a b : A), (z.2 a)⁻¹ ⬝ z.2 b

def subst (A : U) (P : A → U) (a b : A) (p : Path A a b) (x : P a) : P b :=
coe (apd P p) x

def ap (A B : U) (f : A → B) (a b : A) (p : Path A a b) : Path B (f a) (f b) :=
apd f p

def meet (A : U) (a b : A) (p : Path A a b) :
  Path (Σ (x : A), Path A a x) (Σ-mk (Path′ A a) a (idp a)) (Σ-mk (Path′ A a) b p) :=
Σ-prod p (λ (x : A), Path A a x) (idp a) p (idp p)

def J (A : U) (P : Π (a b : A), Path A a b → U)
  (a : A) (d : P a a (idp a)) (b : A) (p : Path A a b) : P a b p :=
coe (apd (λ (w : Σ (x : A), Path A a x), P a w.1 w.2) (meet A a b p)) d

def ap′ (A B : U) (f : A → B) (a b : A) (p : Path A a b) : Path B (f a) (f b) :=
J A (λ (a b : A) (p : Path A a b), Path B (f a) (f b)) a (idp (f a)) b p

def bimap (A B C : U) (a b : A) (a′ b′ : B) (f : A → B → C)
  (p : Path A a b) (q : Path B a′ b′) : Path C (f a a′) (f b b′) :=
J A (λ (a b : A) (p : Path A a b), Path C (f a a′) (f b b′))
  a (ap B C (f a) a′ b′ q) b p

def bimap′ (A B C : U) (a b : A) (a′ b′ : B) (f : A → B → C)
  (p : Path A a b) (q : Path B a′ b′) : Path C (f a a′) (f b b′) :=
J B (λ (a′ b′ : B) (p : Path B a′ b′), Path C (f a a′) (f b b′))
  a′ (ap A C (λ (x : A), f x a′) a b p) b′ q

def bimap-eq-bimap′ (A B C : U) (a b : A) (a′ b′ : B) (f : A → B → C) (p : Path A a b) (q : Path B a′ b′) :
  Path (Path C (f a a′) (f b b′)) (bimap A B C a b a′ b′ f p q) (bimap′ A B C a b a′ b′ f p q) :=
J A (λ (a b : A) (p : Path A a b),
  Path (Path C (f a a′) (f b b′)) (bimap A B C a b a′ b′ f p q)
                                  (bimap′ A B C a b a′ b′ f p q))
  a (idp (ap B C (f a) a′ b′ q)) b p

def diagonal-bimap (A B : U) (f : A → A → B) (a b : A) (p : Path A a b) :
  Path (Path B (f a a) (f b b)) (bimap A A B a b a b f p p) (ap A B (λ (x : A), f x x) a b p) :=
J A (λ (a b : A) (p : Path A a b), Path (Path B (f a a) (f b b)) (bimap A A B a b a b f p p) (ap A B (λ (x : A), f x x) a b p))
  a (idp (idp (f a a))) b p

def J′ (A : U) (a : A) (P : Π (b : A), Path A a b → U)
  (d : P a (idp a)) (b : A) (p : Path A a b) : P b p :=
coe (apd (λ (w : Σ (x : A), Path A a x), P w.1 w.2) (meet A a b p)) d

def singl (A : U) (a : A) := Σ (b : A), Path A a b
def contr-singl (A : U) (a : A) : is-contr (singl A a) :=
Σ-mk (contr (singl A a)) (Σ-mk (Path′ A a) a (idp a))
  (λ (w : Σ (x : A), Path A a x), meet A a w.1 w.2)

def PathP (A : U) (B : A → U) (a b : A) (p : Path A a b) (u : B a) (v : B b) :=
Path (B b) (subst A B a b p u) v

def Σ-eq (A : U) (B : A → U) (a b : A) (p : Path A a b) (u : B a) (v : B b)
  (q : PathP A B a b p u v) : Path (Σ (x : A), B x) (Σ-mk B a u) (Σ-mk B b v) :=
J A (λ (a b : A) (p : Path A a b), Π (u : B a) (v : B b)
  (q : PathP A B a b p u v), Path (Σ (x : A), B x) (Σ-mk B a u) (Σ-mk B b v)) a
  (λ (u v : B a) (q : Path (B a) u v), apd (λ (x : B a), Σ-mk B a x) q)
  b p u v q
