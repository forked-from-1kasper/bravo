module univalence where
import experiments/equiv

def ua′ (A B : U) (e : equiv A B) : Path U A B := ua e
def ideqv (A B : U) (p : Path U A B) : equiv A B :=
coe (cong (λ (X : U) (H : ∂ A B X), equiv A X) p) (equiv-id A)

def uaβ (A B : U) (e : equiv A B) (x : A) : Path B (coe (ua e) x) (e.1 x) :=
idp (e.1 x)

def equiv-symm′ (A B : U) (e : equiv A B) : equiv B A :=
ideqv B A (ua e)⁻¹

-- it’s surprisingly slow
def ua-ideqv (A B : U) (p : Path U A B) : Path (Path U A B) (ua (ideqv A B p)) p :=
coe (cong (λ (X : U) (H : ∂ A B X), Path (Path U A X)
  (ua (ideqv A X (meet p X H).2)) (meet p X H).2) p)
  (idp (idp A))
