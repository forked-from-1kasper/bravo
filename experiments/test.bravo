module test where

def id (A : U) : U := A
def idfun (A : U) (a : A) : A := a

def ∘ (A B C : U) (f : B → C) (g : A → B) : A → C := λ (x : A), f (g x)

def refl′ (A : U) (a : A) : Path A a a := idp a
def symm (A : U) (a b : A) (p : Path A a b) : Path A b a := p⁻¹
def trans (A : U) (a b c : A) (p : Path A a b) (q : Path A b c) : Path A a c := p ⬝ q
def symm-symm (A : U) (a b : A) (p : Path A a b) :
  Path (Path A a b) (symm A b a (symm A a b p)) p :=
idp p

def subst (A : U) (P : A → U) (a b : A) (p : Path A a b) (x : P a) : P b :=
coe (apd P p) x

def ap (A B : U) (f : A → B) (a b : A) (p : Path A a b) : Path B (f a) (f b) :=
apd f p

def Path′ (A : U) (a b : A) := Path A a b

def Σ-prod-fst (A : U) (B : A → U) (a b : A) (p : Path A a b) (u : B a) (v : B b)
  (q : Path (B b) (coe (apd B p) u) v) (C : A → U) (f : Π (x : A), C x) :
  Path (C b) (coe (apd (λ (w : Σ (x : A), B x), C w.1) (Σ-prod p B u v q)) (f a)) (f b) :=
apd (λ (w : Σ (x : A), B x), f w.1) (Σ-prod p B u v q)

def meet (A : U) (a b : A) (p : Path A a b) :
  Path (Σ (x : A), Path A a x) (Σ-mk (Path′ A a) a (idp a)) (Σ-mk (Path′ A a) b p) :=
Σ-prod p (λ (x : A), Path A a x) (idp a) p (idp p)

def rev-meet (A : U) (a b : A) (p : Path A a b) :
  Path (Σ (x : A), Path A a x) (Σ-mk (Path′ A a) b p) (Σ-mk (Path′ A a) a (idp a)) :=
Σ-prod p⁻¹ (λ (x : A), Path A a x) p (idp a) (idp (idp a))

def J (A : U) (P : Π (a b : A), Path A a b → U)
  (a : A) (d : P a a (idp a)) (b : A) (p : Path A a b) : P a b p :=
coe (apd (λ (w : Σ (x : A), Path A a x), P a w.1 w.2) (meet A a b p)) d

def revsubst (A : U) (P : A → U) (a b : A) (p : Path A a b) : P b → P a :=
J A (λ (a b : A) (p : Path A a b), P b → P a) a (idfun (P a)) b p

-- β-rule for J holds definitionally
def J-β (A : U) (P : Π (a b : A), Path A a b → U) (a : A)
  (d : P a a (idp a)) : Path (P a a (idp a)) d (J A P a d a (idp a)) :=
idp d

def coe-apd-Path (Δ : U) (α β : Δ) (p : Path Δ α β) (A : Δ → U)
  (f g : Π (x : Δ), A x) (q : Path (A α) (f α) (g α)) : Path (A β) (f β) (g β) :=
(apd f p)⁻¹ ⬝ (apd (λ (x : A α), coe (apd A p) x) q) ⬝ (apd g p)

def coe-apd-Path′ (Δ : U) (α β : Δ) (p : Path Δ α β) (A : Δ → U)
  (f g : Π (x : Δ), A x) (q : Path (A α) (f α) (g α)) : Path (A β) (f β) (g β) :=
coe (apd (λ (x : Δ), Path (A x) (f x) (g x)) p) q

def coe-apd-Path-is-correct (Δ : U) (α β : Δ) (p : Path Δ α β) (A : Δ → U)
  (f g : Π (x : Δ), A x) (q : Path (A α) (f α) (g α)) :
  Path (Path (A β) (f β) (g β)) (coe-apd-Path Δ α β p A f g q)
                                (coe-apd-Path′ Δ α β p A f g q) :=
idp (coe-apd-Path Δ α β p A f g q)

def coe-apd-Π′ (Δ : U) (α β : Δ) (p : Path Δ α β)
  (A : Δ → U) (B : Π (x : Δ), A x → U)
  (φ : Π (a : A α), B α a) : Π (b : A β), B β b :=
coe (apd (λ (x : Δ), Π (a : A x), B x a) p) φ

def coe-apd-Π (Δ : U) (α β : Δ) (p : Path Δ α β)
  (A : Δ → U) (B : Π (x : Δ), A x → U)
  (φ : Π (a : A α), B α a) : Π (b : A β), B β b :=
λ (x : A β), coe (apd (λ (w : Σ (x : Δ), Path Δ β x), B w.1 (coe (apd A w.2) x))
                      (rev-meet Δ β α p⁻¹)) (φ (coe (apd A p⁻¹) x))

def coe-apd-Π-is-correct (Δ : U) (α β : Δ) (p : Path Δ α β)
  (A : Δ → U) (B : Π (x : Δ), A x → U) (φ : Π (a : A α), B α a) :
  Path (Π (b : A β), B β b) (coe-apd-Π Δ α β p A B φ) (coe-apd-Π′ Δ α β p A B φ) :=
idp (coe-apd-Π Δ α β p A B φ)

def coe-apd-Σ (Δ : U) (α β : Δ) (p : Path Δ α β)
  (A : Δ → U) (B : Π (x : Δ), A x → U)
  (z : Σ (a : A α), B α a) : Σ (b : A β), B β b :=
Σ-mk (B β) (coe (apd A p) z.1)
  (coe (apd (λ (w : Σ (x : Δ), Path Δ α x), B w.1 (coe (apd A w.2) z.1))
            (meet Δ α β p)) z.2)

def coe-apd-Σ′ (Δ : U) (α β : Δ) (p : Path Δ α β)
  (A : Δ → U) (B : Π (x : Δ), A x → U)
  (z : Σ (a : A α), B α a) : Σ (b : A β), B β b :=
coe (apd (λ (x : Δ), Σ (a : A x), B x a) p) z

def coe-apd-Σ-is-correct (Δ : U) (α β : Δ) (p : Path Δ α β)
  (A : Δ → U) (B : Π (x : Δ), A x → U) (z : Σ (a : A α), B α a) :
  Path (Σ (b : A β), B β b) (coe-apd-Σ Δ α β p A B z) (coe-apd-Σ′ Δ α β p A B z) :=
idp (coe-apd-Σ Δ α β p A B z)

def symm′ (A : U) (a b : A) (p : Path A a b) : Path A b a :=
coe (apd (λ (x : A), Path A x a) p) (idp a)

def symm″ (A : U) (a b : A) (p : Path A a b) : Path A b a :=
J A (λ (a b : A) (p : Path A a b), Path A b a) a (idp a) b p

def symm‴ (A : U) (a b : A) (p : Path A a b) : Path A b a :=
coe-apd-Path A a b p (λ (x : A), A) (λ (x : A), x) (λ (x : A), a) (idp a)

def trans′ (A : U) (a b c : A) (p : Path A a b) (q : Path A b c) : Path A a c :=
coe (apd (λ (x : A), Path A a x) q) p

-- looks like that if subst A P a b p (subst A P b a p⁻¹ u) ≡ u,
-- then typechecker can generate ill-typed terms
def transport-back-and-forward (A : U) (P : A → U) (a b : A)
  (p : Path A a b) (u : P b) : Path (P b) (subst A P a b p (subst A P b a p⁻¹ u)) u :=
J A (λ (a b : A) (p : Path A a b),
  Π (u : P b), Path (P b) (subst A P a b p (subst A P b a p⁻¹ u)) u) a
  (λ (u : P a), idp u) b p u

def path-idfun (A : U) (a b : A) (p : Path A a b) :=
J A (λ (a b : A) (p : Path A a b), Path A a b) a (idp a) b p

def apd-trans (A : U) (a b c : A) (B : A → U)
  (p : Path A a b) (q : Path A b c) (f : Π (x : A), B x) :
  Path (B c) (coe (apd B (p ⬝ q)) (f a)) (f c) :=
apd (λ (x : B b), coe (apd B q) x) (apd f p) ⬝ (apd f q)

def apd-trans′ (A : U) (a b c : A) (B : A → U)
  (p : Path A a b) (q : Path A b c) (f : Π (x : A), B x) :
  Path (B c) (coe (apd B (p ⬝ q)) (f a)) (f c) :=
apd f (p ⬝ q)

def apd-trans-is-correct (A : U) (a b c : A) (B : A → U)
  (p : Path A a b) (q : Path A b c) (f : Π (x : A), B x) :
  Path (Path (B c) (coe (apd B (p ⬝ q)) (f a)) (f c))
       (apd-trans A a b c B p q f) (apd-trans′ A a b c B p q f) :=
idp (apd-trans A a b c B p q f)

def apd-symm (A : U) (a b : A) (B : A → U) (f : Π (x : A), B x)
  (p : Path A a b) : Path (B a) (coe (apd B p⁻¹) (f b)) (f a) :=
(apd (λ (w : Σ (x : A), Path A a x), coe (apd B w.2⁻¹) (f w.1)) (meet A a b p))⁻¹

def apd-symm′ (A : U) (a b : A) (B : A → U) (f : Π (x : A), B x)
  (p : Path A a b) : Path (B a) (coe (apd B p⁻¹) (f b)) (f a) :=
apd f p⁻¹

def apd-symm-is-correct (A : U) (a b : A) (B : A → U) (f : Π (x : A), B x) (p : Path A a b) :
  Path (Path (B a) (coe (apd B p⁻¹) (f b)) (f a)) (apd-symm A a b B f p) (apd-symm′ A a b B f p) :=
idp (apd-symm A a b B f p)

def apd-comp (A : U) (a b : A) (p : Path A a b) (B : A → U) (g : Π (x : A), B x) (C : B b → U) (f : Π (y : B b), C y) :
  Path (C (g b)) (coe (apd C (apd g p)) (f (coe (apd B p) (g a)))) (f (g b)) :=
apd (λ (w : Σ (x : A), Path A b x), f (coe (apd B w.2⁻¹) (g w.1))) (meet A b a p⁻¹)⁻¹

def apd-comp′ (A : U) (a b : A) (p : Path A a b) (B : A → U) (g : Π (x : A), B x) (C : B b → U) (f : Π (y : B b), C y) :
  Path (C (g b)) (coe (apd C (apd g p)) (f (coe (apd B p) (g a)))) (f (g b)) :=
apd f (apd g p)

def apd-comp-is-correct (A : U) (a b : A) (p : Path A a b) (B : A → U) (g : Π (x : A), B x) (C : B b → U) (f : Π (y : B b), C y) :
  Path (Path (C (g b)) (coe (apd C (apd g p)) (f (coe (apd B p) (g a)))) (f (g b))) 
       (apd-comp A a b p B g C f) (apd-comp′ A a b p B g C f) :=
idp (apd-comp A a b p B g C f)

def ap-trans (A B : U) (f : A → B) (a b c : A) (p : Path A a b) (q : Path A b c) :
  Path (Path B (f a) (f c)) (ap A B f a c (p ⬝ q)) ((ap A B f a b p) ⬝ (ap A B f b c q)) :=
idp (ap A B f a c (p ⬝ q))

def subst-trans (A : U) (P : A → U) (a b c : A)
  (p : Path A a b) (q : Path A b c) (x : P a) :
  Path (P c) (subst A P a c (p ⬝ q) x) (subst A P b c q (subst A P a b p x)) :=
idp (subst A P a c (p ⬝ q) x)

def ap-comp (A B C : U) (f : A → B) (g : B → C) (a b : A) (p : Path A a b) :
  Path (Path C (g (f a)) (g (f b)))
       (ap B C g (f a) (f b) (ap A B f a b p))
       (ap A C (λ (x : A), g (f x)) a b p) :=
idp (ap A C (λ (x : A), g (f x)) a b p)

def coe-apd-Π-rev′ (Δ : U) (α β : Δ) (p : Path Δ α β)
  (A : Δ → U) (B : Π (x : Δ), A x → U)
  (φ : Π (b : A β), B β b) : Π (a : A α), B α a :=
coe (apd (λ (x : Δ), Π (b : A x), B x b) p⁻¹) φ

def coe-apd-Π-rev (Δ : U) (α β : Δ) (p : Path Δ α β)
  (A : Δ → U) (B : Π (x : Δ), A x → U)
  (φ : Π (b : A β), B β b) : Π (a : A α), B α a :=
coe-apd-Π Δ β α p⁻¹ A B φ

def coe-apd-Π-rev-is-correct (Δ : U) (α β : Δ) (p : Path Δ α β)
  (A : Δ → U) (B : Π (x : Δ), A x → U) (φ : Π (b : A β), B β b) :
  Path (Π (a : A α), B α a) (coe-apd-Π-rev Δ α β p A B φ) (coe-apd-Π-rev′ Δ α β p A B φ) :=
idp (coe-apd-Π-rev Δ α β p A B φ)

def Σ-mk-rev (A : U) (B : A → U) (a b : A) (u : B a) (v : B b)
  (p : Path A a b) (q : Path (B b) (coe (apd B p) u) v) :
  Path (Σ (x : A), B x) (Σ-mk B b v) (Σ-mk B a u) :=
Σ-prod p⁻¹ B v u
  ((apd (λ (w : B b), coe (apd B p)⁻¹ w) q)⁻¹ ⬝
   (apd (λ (w : Σ (x : A), Path A a x), coe (apd B w.2⁻¹) (coe (apd B w.2) u))
        (meet A a b p))⁻¹)

def Σ-mk-rev′ (A : U) (B : A → U) (a b : A) (u : B a) (v : B b)
  (p : Path A a b) (q : Path (B b) (coe (apd B p) u) v) :
  Path (Σ (x : A), B x) (Σ-mk B b v) (Σ-mk B a u) :=
(Σ-prod p B u v q)⁻¹

{-
def Σ-mk-rev-is-correct (A : U) (B : A → U) (a b : A) (u : B a) (v : B b)
  (p : Path A a b) (q : Path (B b) (coe (apd B p) u) v) :
  Path (Path (Σ (x : A), B x) (Σ-mk B b v) (Σ-mk B a u))
       (Σ-mk-rev A B a b u v p q) (Σ-mk-rev′ A B a b u v p q) :=
idp (Σ-mk-rev A B a b u v p q)
-}

def Σ-mk-trans (A : U) (B : A → U) (a b c : A) (u : B a) (v : B b) (w : B c)
  (p₁ : Path A a b) (q₁ : Path (B b) (coe (apd B p₁) u) v)
  (p₂ : Path A b c) (q₂ : Path (B c) (coe (apd B p₂) v) w) :
  Path (Σ (x : A), B x) (Σ-mk B a u) (Σ-mk B c w) :=
Σ-prod (p₁ ⬝ p₂) B u w (apd (λ (x : B b), coe (apd B p₂) x) q₁ ⬝ q₂)

def Σ-mk-trans′ (A : U) (B : A → U) (a b c : A) (u : B a) (v : B b) (w : B c)
  (p₁ : Path A a b) (q₁ : Path (B b) (coe (apd B p₁) u) v)
  (p₂ : Path A b c) (q₂ : Path (B c) (coe (apd B p₂) v) w) :
  Path (Σ (x : A), B x) (Σ-mk B a u) (Σ-mk B c w) :=
Σ-prod p₁ B u v q₁ ⬝ Σ-prod p₂ B v w q₂

def Σ-mk-trans-is-correct (A : U) (B : A → U) (a b c : A) (u : B a) (v : B b) (w : B c)
  (p₁ : Path A a b) (q₁ : Path (B b) (coe (apd B p₁) u) v)
  (p₂ : Path A b c) (q₂ : Path (B c) (coe (apd B p₂) v) w) :
  Path (Path (Σ (x : A), B x) (Σ-mk B a u) (Σ-mk B c w))
       (Σ-mk-trans A B a b c u v w p₁ q₁ p₂ q₂)
       (Σ-mk-trans′ A B a b c u v w p₁ q₁ p₂ q₂) :=
idp (Σ-mk-trans A B a b c u v w p₁ q₁ p₂ q₂)

def apd-Σ-ctor (Δ : U) (a b : Δ) (p : Path Δ a b)
  (A : Δ → U) (B : Π (x : Δ), A x → U)
  (f : Π (x : Δ), A x) (g : Π (x : Δ), B x (f x)) :=
apd (λ (x : Δ), Σ-mk (B x) (f x) (g x)) p
