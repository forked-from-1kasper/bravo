module path where

def id (A : U) : U := A
def idfun (A : U) (a : A) : A := a

def ∘ (A B C : U) (f : B → C) (g : A → B) : A → C := λ (x : A), f (g x)

def is-contr (A: U) : U := Σ (x: A), Π (y: A), Path A x y
def is-prop (A : U) : U := Π (a b : A), Path A a b
def is-set (A : U) : U := Π (a b : A), is-prop (Path A a b)
def is-groupoid (A : U) : U := Π (a b : A), is-set (Path A a b)
def is-2-groupoid (A : U) : U := Π (a b : A), is-groupoid (Path A a b)

def subst (A : U) (P : A → U) (a b : A) (p : Path A a b) (x : P a) : P b :=
coe (cong (λ (x : A) (H : ∂ a b x), P x) p) x

def ap (A B : U) (f : A → B) (a b : A) (p : Path A a b) : Path B (f a) (f b) :=
cong (λ (x : A) (H : ∂ a b x), f x) p

def J (A : U) (P : Π (a b : A), Path A a b → U)
  (a : A) (d : P a a (idp a)) (b : A) (p : Path A a b) : P a b p :=
coe (cong (λ (x : A) (H : ∂ a b x), P a (meet p x H).1 (meet p x H).2) p) d

def singl (A : U) (a : A) := Σ (b : A), Path A a b
def contr-singl (A : U) (a : A) : is-contr (singl A a) :=
((a, idp a), λ (z : singl A a),
  J A (λ (a b : A) (p : Path A a b), Path (singl A a) (a, idp a) (b, p))
    a (idp (a, idp a)) z.1 z.2)